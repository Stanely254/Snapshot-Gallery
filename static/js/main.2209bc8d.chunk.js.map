{"version":3,"sources":["context/PhotoContext.js","components/config.js","components/Form.js","components/Navigation.js","components/Header.js","components/NoImages.js","components/Image.js","components/Gallery.js","components/Loader.js","components/Container.js","components/Item.js","components/Search.js","components/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["PhotoContext","createContext","PhotoContextProvider","props","useState","images","setImages","loading","setLoading","Provider","value","runSearch","query","axios","get","then","response","data","photos","photo","catch","error","console","log","children","Form","handleSubmit","history","searchEntry","setSearchEntry","onSubmit","e","className","type","name","placeholder","onChange","target","height","width","d","fill","fillRule","Navigation","to","Header","NoImages","Image","url","title","src","alt","Gallery","noImages","results","length","map","image","farm","server","id","secret","key","Loader","Container","searchTerm","useContext","useEffect","Item","Search","NotFound","App","searchInput","preventDefault","reset","push","basename","render","exact","path","match","params","component","Component","Boolean","window","location","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.2209bc8d.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react'\r\nimport axios from 'axios'\r\nimport {apiKey} from '../components/config'\r\nexport const PhotoContext = createContext()\r\n\r\nconst PhotoContextProvider = props => {\r\n  const [images, setImages] = useState([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const runSearch = query => {\r\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${apiKey}&tags=${query}&per_page=24&format=json&nojsoncallback=1`).then(response => {\r\n      setImages(response.data.photos.photo)\r\n      setLoading(false)\r\n    }).catch(error => {\r\n      console.log(\r\n        \"Encountered an error with fetching and parsing data\",\r\n        error\r\n      )\r\n    })\r\n  }\r\n  \r\n  \r\n  return(\r\n    <PhotoContext.Provider value={{images, loading, runSearch}}>\r\n      {props.children}\r\n    </PhotoContext.Provider>\r\n  )\r\n}\r\n\r\nexport default PhotoContextProvider","export const apiKey = \"589285b44a757d964c4b4feef2ef8796\";\r\n","import React, {useState} from 'react'\r\n\r\nconst Form = ({handleSubmit, history}) => {\r\n  const [searchEntry, setSearchEntry] = useState(\"\");\r\n  // update state\r\n  const updateSearchInput = e => {\r\n    setSearchEntry(e.target.value);\r\n  };\r\n  \r\n  return (\r\n    <form onSubmit={e => handleSubmit(e, history, searchEntry)} className=\"search-form\">\r\n      <input type=\"text\" name=\"search\" placeholder=\"Search...\" onChange={updateSearchInput} />\r\n      <button className=\"search-button\" type=\"submit\">\r\n        <svg height=\"32\" width=\"32\">\r\n          <path\r\n            d=\"M19.427 21.427a8.5 8.5 0 1 1 2-2l5.585 5.585c.55.55.546 1.43 0 1.976l-.024.024a1.399 1.399 0 0 1-1.976 0l-5.585-5.585zM14.5 21a6.5 6.5 0 1 0 0-13 6.5 6.5 0 0 0 0 13z\"\r\n            fill=\"#ffffff\"\r\n            fillRule=\"evenodd\"\r\n          />\r\n        </svg>\r\n      </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;","import React from 'react'\r\nimport {\r\n  NavLink\r\n} from 'react-router-dom';\r\n\r\nconst Navigation = () => {\r\n  return (\r\n    <div className=\"main-nav\">\r\n      <ul>\r\n        <li><NavLink to=\"/mountain\">Mountain</NavLink></li>\r\n        <li><NavLink to=\"/beach\">Beaches</NavLink></li>\r\n        <li><NavLink to=\"/bird\">Birds</NavLink></li>\r\n        <li><NavLink to=\"/food\">Food</NavLink></li>\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Navigation;","import React from 'react'\r\nimport Form from './Form'\r\nimport Navigation from './Navigation'\r\n\r\nconst Header = ({history, handleSubmit}) => {\r\n  return(\r\n    <div>\r\n      <h1>SnapShot</h1>\r\n      <Form history={history} handleSubmit={handleSubmit} />\r\n      <Navigation/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst NoImages = () => (\r\n  <div>\r\n    <h2>No Images Found</h2>\r\n    <p>Please try a different search term</p>\r\n  </div>\r\n);\r\n\r\nexport default NoImages;\r\n","import React from \"react\";\r\n\r\nconst Image = ({ url, title }) => (\r\n  <li>\r\n    <img src={url} alt={title} />\r\n  </li>\r\n);\r\n\r\nexport default Image;\r\n","import React from \"react\";\r\nimport NoImages from \"./NoImages\";\r\nimport Image from \"./Image\";\r\nconst Gallery = props => {\r\n  const results = props.data;\r\n  let images;\r\n  let noImages;\r\n  // map variables to each item in fetched image array and return image component\r\n  if (results.length > 0) {\r\n    images = results.map(image => {\r\n      let farm = image.farm;\r\n      let server = image.server;\r\n      let id = image.id;\r\n      let secret = image.secret;\r\n      let title = image.title;\r\n      let url = `https://farm${farm}.staticflickr.com/${server}/${id}_${secret}_m.jpg`;\r\n      return <Image url={url} key={id} alt={title} />;\r\n    });\r\n  } else {\r\n    noImages = <NoImages />; // return 'not found' component if no images fetched\r\n  }\r\n  return (\r\n    <div>\r\n      <ul>{images}</ul>\r\n      {noImages}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Gallery;\r\n","import React from 'react'\r\n\r\nconst Loader = () => {\r\n  return(\r\n    <div className=\"loader\">\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader;","import React, { useContext, useEffect } from \"react\";\r\nimport { PhotoContext } from \"../context/PhotoContext\";\r\nimport Gallery from \"./Gallery\";\r\nimport Loader from \"./Loader\";\r\n\r\nconst Container = ({ searchTerm }) => {\r\n  const { images, loading, runSearch } = useContext(PhotoContext);\r\n  useEffect(() => {\r\n    runSearch(searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  return (\r\n    <div className=\"photo-container\">\r\n      {loading ? <Loader /> : <Gallery data={images} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Container;\r\n","import React from 'react'\r\nimport Container from './Container'\r\n\r\nconst Item = ({searchTerm}) => {\r\n  return(\r\n    <div>\r\n      <h2>{searchTerm} Pictures</h2>\r\n      <Container searchTerm={searchTerm}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Item;","import React from 'react'\r\nimport Container from './Container'\r\n\r\nconst Search = ({searchTerm}) => {\r\n  return (\r\n    <div>\r\n      <h2>{searchTerm} Images</h2>\r\n      <Container searchTerm={searchTerm}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Search","import React from \"react\";\r\n\r\nconst NotFound = () => (\r\n  <div className=\"not-found\">\r\n    <h2>Page Not Found</h2>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, { Component } from \"react\";\nimport PhotoContextProvider from \"./context/PhotoContext\";\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Header from \"./components/Header\";\nimport Item from \"./components/Item\";\nimport Search from \"./components/Search\";\nimport NotFound from \"./components/NotFound\";\n\nclass App extends Component{\n  // Prevent page reload, clear input, set URL, and push history on submit\n  handleSubmit = (e, history, searchInput) => {\n    e.preventDefault()\n    e.target.reset()\n    let url = `/search/${searchInput}`\n    history.push(url)\n  }\n  \n  render(){\n    return(\n      <PhotoContextProvider>\n        <HashRouter basename=\"/SnapScout\">\n          <div className=\"container\">\n            <Route\n              render={props => (\n                <Header\n                  handleSubmit={this.handleSubmit}\n                  history={props.history}\n                />\n              )}\n            />\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={() => <Redirect to=\"/mountain\" />}\n              />\n\n              <Route\n                path=\"/mountain\"\n                render={() => <Item searchTerm=\"mountain\" />}\n              />\n              <Route path=\"/beach\" render={() => <Item searchTerm=\"beach\" />} />\n              <Route path=\"/bird\" render={() => <Item searchTerm=\"bird\" />} />\n              <Route path=\"/food\" render={() => <Item searchTerm=\"food\" />} />\n              <Route\n                path=\"/search/:searchInput\"\n                render={props => (\n                  <Search searchTerm={props.match.params.searchInput} />\n                )}\n              />\n              <Route component={NotFound} />\n            </Switch>\n          </div>\n        </HashRouter>\n      </PhotoContextProvider>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}